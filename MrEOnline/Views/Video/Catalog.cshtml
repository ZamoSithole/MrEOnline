@using X.PagedList.Mvc.Bootstrap4;
@using X.PagedList.Mvc;
@using X.PagedList;

@model IPagedList<MrE.Models.Entities.Video>
@*@model IEnumerable<MrE.Models.Entities.Video>*@
@{
    ViewBag.Title = "Movies";
}
<div class="card">
    <div class="card-header">@ViewBag.Title</div>
    <div class="card-body">

        <p>
            <a href="@Url.Action("Create")" class="btn btn-success btnCheckOut"> <i class="fa fa-shopping-cart"></i>&nbsp;Check Out</a>
            <span style="color:Red" id="Amount"></span>
        </p>

        @foreach (var item in Model) {
            <div class="row flex-shrink-0" style="margin-bottom: 19px;">
                <div class="col-md-12">
                    <div class="card divOne">
                        <span class="badge corner-ribbon top-right shadow btnCheck" data-VideoId="@item.Id" data-RentalPrice="@item.RentalPrice" disabled style=" display:none">Rented</span>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-4 video-img">
                                    @if (item.Data == null) {
                                        <i class="fa fa-picture-o fa-5x" aria-hidden="true" style=" font-size: 13em; "></i>
                                    } else {
                                        <img src="data:image/png;base64,@System.Convert.ToBase64String( item.Data)" height="auto" max-width="100%" style="display:block" class="img-responsive" />
                                    }
                                </div>
                                <div class="col-md-2" data-VideoId="@item.Id">
                                    <dl class="dl-horizontal">
                                        <dt>Title</dt>
                                        <dd>@Html.DisplayFor(model => item.Title)</dd>

                                        <dt>Genre</dt>
                                        <dd>@Html.DisplayFor(model => item.Genre.Name)</dd>

                                        <dt>Age Restriction</dt>
                                        <dd>@Html.DisplayFor(model => item.AgeRestriction)</dd>

                                        <dt>Rental Price</dt>
                                        <dd>@Html.DisplayFor(model => item.RentalPrice)</dd>
                                    </dl>
                                </div>
                                <div class="col-md-4">
                                    <dl class="dl-horizontal">
                                        <dt>Description</dt>
                                        <dd class="ellipsis" data-VideoId="@item.Id" data-toggle="popover" data-trigger="hover" data-placement="left" data-container="body" data-content="@item.Description">
                                            @Html.DisplayFor(model => item.Description)
                                        </dd>
                                    </dl>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer">
                            <div class="buttons">
                                <button type="button" class="btn btn-sm btn-outline-success">
                                    <i class="fa fa-thumbs-o-up"></i>&nbsp;Like&nbsp;<span class="badge">20</span>
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-danger">
                                    <i class="fa fa-thumbs-o-down"></i>&nbsp;Dislike&nbsp;<span class="badge">20</span>
                                </button>
                                <a class="pull-right btnCancel" data-VideoId="@item.Id" data-RentalPrice="@item.RentalPrice" style="cursor:pointer; display: none">
                                    <i class="fa fa-close" style="color:red"></i>
                                </a>
                                <button type="button" class="btn btn-sm btn-outline-primary">
                                    <i class="fa fa-share-alt"></i>&nbsp;Share
                                </button>
                                <button type="button" class="btn btn-sm btn-outline-dark">
                                    <i class="fa fa-comment-o"></i>&nbsp;Comment
                                </button>
                                <button type="button" data-videoid="@item.Id" class="btn btn-sm btn-outline-info btn-cast">
                                    <i class="fa fa-user"></i>&nbsp;Cast
                                </button>
                                @if (item.Quantity > 0) {
                                    <button type="button" title="Rent" class="btnRent btn btn-sm btn-outline-success" data-VideoId="@item.Id" data-RentalPrice="@item.RentalPrice">
                                        <i class="fa fa-shopping-basket"></i>
                                        &nbsp;Rent
                                    </button>
                                }

                                @if (item.Quantity < 2) {
                                    <p class="pull-right">Only <span>@item.Quantity</span> remains</p>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        }
        <nav>
            <ul class="pagination">
                <li class="page-item">
                    @*<a class="page-link">@(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount</a>*@
                    @Html.PagedListPager(Model, page => Url.Action("Catalog", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }), new PagedListRenderOptions { LinkToFirstPageFormat = "<< First", LinkToPreviousPageFormat = "< Previous", LinkToNextPageFormat = "Next >", LinkToLastPageFormat = "Last >>" })
                </li>
            </ul>
        </nav>
        <nav aria-label="Page navigation example">
            <ul class="pagination">
                <li class="page-item">


                </li>
            </ul>
        </nav>
        @*<div class="page-link" style="display:inline-block; vertical-align:middle">
                <b>Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount</b>
            </div>
            <div class="pagination" style="display:inline-block; vertical-align:middle">
                @Html.PagedListPager(Model, page => Url.Action("Catalog", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }), new PagedListRenderOptions { LinkToFirstPageFormat = "<< First", LinkToPreviousPageFormat = "< Previous", LinkToNextPageFormat = "Next >", LinkToLastPageFormat = "Last >>" })
            </div>*@
    </div>
</div>
<div class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Cast</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-dismiss="modal">Close</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
<style>
    .active {
        padding: 0.5rem 0.75rem;
        border: 1px solid #868e96;
        border-radius: 34px;
    }

    .pagination :not(li) {
        padding: 0.5rem 0.75rem;
    }

    .pagination-container {
        font-family: "FontAwesome";
    }

    .PagedList-skipToNext::after {
        content: "\f054";
    }

    .PagedList-skipToNext {
        text-decoration: none !important;
        position: relative;
        display: block;
        padding: 0.5rem 0.75rem;
        margin-left: -1px;
        line-height: 1.25;
        background-color: #fff;
        border: 1px solid #868e96;
        border-radius: 10px;
    }

        .PagedList-skipToNext a {
            text-decoration: none !important;
            line-height: 0;
            font-size: 0;
            color: transparent;
            text-indent: -9999px;
            padding: 5px;
        }

            .PagedList-skipToNext a:hover {
                color: #fff !important;
            }

        .PagedList-skipToNext:hover {
            text-decoration: none !important;
            background-color: #868e96;
            color: #fff !important;
        }

    .PagedList-skipToPrevious::before {
        content: "\f053";
    }

    .PagedList-skipToPrevious {
        text-decoration: none !important;
        position: relative;
        display: block;
        padding: 0.5rem 0.75rem;
        margin-left: -1px;
        line-height: 1.25;
        background-color: #fff;
        border: 1px solid #868e96;
        border-radius: 10px;
    }

        .PagedList-skipToPrevious:hover {
            text-decoration: none !important;
            background-color: #868e96;
            color: #fff !important;
        }

        .PagedList-skipToPrevious a:hover {
            color: #fff !important;
        }

        .PagedList-skipToPrevious a {
            text-decoration: none !important;
            line-height: 0;
            font-size: 0;
            padding: 5px;
            color: transparent;
        }
</style>
@section Scripts{
    <script src="~/Scripts/sweetalert2.all.min.js"></script>
    <script type="text/javascript">
        $('[data-toggle="popover"]').popover()

        var nItems = 0;
        var iCurrentSlide = 1;
        var iNextSlide = 2;
        var iSlideInterval = 3; // in seconds
        var looper = null;
        var currentCast = $('data-CastId');
        var videoId = 0

        var Total = 0;

        var newTotal = 0;

        function startSlider() {
            nItems = $(".carousel > div").length;

            looper = setInterval(function () {
                if (iNextSlide > nItems) {
                    iCurrentSlide = 1;
                    iNextSlide = 1;
                }

                $(".carousel > div").hide();
                $(".carousel > .item" + iNextSlide).show();

                iCurrentSlide = iNextSlide;
                iNextSlide++;
            }, iSlideInterval * 1000);
        }

        function showSlide(isPrev) {
            window.clearInterval(looper);

            var iNewSlide = 0;

            if (isPrev) {
                // Show previous slide:
                iNewSlide = --iCurrentSlide;
            } else {
                // Show next slide:
                iNewSlide = ++iCurrentSlide;
            }

            if (iNewSlide > nItems) iNewSlide = 1;
            else if (iNewSlide < 1) iNewSlide = nItems;

            $(".carousel > div").hide();
            $(".carousel > .item" + iNewSlide).show();

            iCurrentSlide = iNewSlide;
            iNextSlide = iNewSlide + 1;

            startSlider();
        }

        $(document).on("click", '.btn-cast', function () {
            var videoId = $(this).data("videoid");
            var url = '/Cast/CastCheckoutIndexPartial/?videoid=' + videoId;
            $.get(url).done(function (response) {
                $('.modal-body').empty().append(response);
                $('.carousel').carousel();
                $('.modal').modal('show');
            })
        });

        $('.spanDescription').on("click", function (e) {
            e.preventDefault();
            videoId = $(this).attr("data-VideoId");
            $(".divDescription[data-VideoId='" + videoId + "']").collapse('toggle');
            $(".spanDescription[data-VideoId='" + videoId + "']").html('<i class="fa fa-chevron-up"></i>');
        })

        $(document).on("click", '.btn-cast', function () {
            var videoId = $(this).data("videoid");
            var url = '/Cast/CastCheckoutIndexPartial/?videoid=' + videoId;
            $.get(url).done(function (response) {
                $('.modal-body').empty().append(response);
                $('.modal').show();
            })
        });
        var RentedItems = [];
        $(document).on('click', '.btnRent', function (e) {
            e.preventDefault();
            var currentRow = $(this).attr("data-RentalPrice");
            var videoID = $(this).attr("data-VideoId");
            console.log(currentRow)
            var rental = {
                "videoId": videoID,
            };

            $.post("/api/rentalsapi", rental)
                .done(function (response) {
                    if (response.Message == "Authorization has been denied for this request.") {
                        swal({
                            type: 'error',
                            title: 'Oops..',
                            html: 'You are <b>not</b> logged in.',
                            allowOutsideClick: false,
                            confirmButtonText:
                                '<i class=" fa fa-sign-in"></i>&nbsp;Log in!',
                            confirmButtonAriaLabel: 'Thumbs up, great!',
                            showCancelButton: true,
                            cancelButtonColor: '#d33',
                        }).then((result) => {
                            console.log(result)
                            if (result.value = true) {
                                window.location = "/Account/Login?ReturnUrl=%2FVideo/Catalog";
                            }
                        })
                    } else {
                        //$.post("/Video/UpdateQuantity?videoId=" + videoID).done();
                        Total = Total + parseInt(currentRow);
                        $('#Amount').text('R' + Total + '.00')
                        $(".btnCancel[data-VideoId='" + videoID + "']").show();
                        $(".btnCheck[data-VideoId='" + videoID + "']").show();
                    }
                    console.log("returned " + JSON.stringify(response));
                }).fail(function (status, jxHR, error) {
                    console.log('error while calling api is => ' + JSON.stringify(error));
                });
            $(this).hide();

        });
        $(document).on('click', '.btnCancel', function (e) {
            e.preventDefault();
            var currentRow = $(this).attr("data-RentalPrice");
            console.log(currentRow);
            var videoID = $(this).attr("data-VideoId");
            var checkOutAmount = $('#Amount').text();
            substitude = checkOutAmount.replace('R', '');
            newTotal = Total - parseInt(currentRow);
            $('#Amount').text('R' + newTotal + '.00')
            $(".btnRent[data-VideoId='" + videoID + "']").show();
            $(this).hide();
            $(".btnCheck[data-VideoId='" + videoID + "']").hide();
        });

        $(document).on('click', '.btnCheckOut', function (e) {
            e.preventDefault();
            window.location.href = "/Rental/Confirm"
            //$.ajax({
            //    dataType: "json",
            //    url: "/Rental/Confirm"
            //});


            //$.get("/Rental/Confirm", function (result) {
            //    console.log(result);
            //})

            //$.get("/Rental/Confirm")
            //    .done(function (response) {
            //        console.log("returned " + JSON.stringify(response));
            //    })//.fail(function (status, jxHR, error) {
            //    console.log('error while calling api is => ' + JSON.stringify(error));
            //});
            //var data = "<p>This is 'myWindow'</p>";
            //window.open("data:text/html," + encodeURIComponent(data),
            //    "_blank", "width=200,height=100");

            //debugger;
            //var url = "/Rental/Create"//?item=" + RentedItems;
            //$.post("/api/rentalsapi", RentedItems)
            //    .done(function (respose) {
            //        console.log("response from /api/rental post is => " + JSON.stringify(respose));
            //    }).fail(function (status, jxHR, error) {
            //        console.log('error while calling api is => ' + JSON.stringify(error));
            //    })
            //window.location.href = url;

        });
    </script>
}